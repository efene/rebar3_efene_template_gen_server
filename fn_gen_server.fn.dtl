@behaviour(gen_server)

fn start_link @public case Opts:
  gen_server.start_link(#i module, Opts, [])
end

fn stop @public case Ref:
  gen_server.call(Ref, stop)
end

fn action @public case Ref, Data:
  gen_server.call(Ref, (action, Data))
end

#_ "gen_server callbacks"

fn init @public case Opts:
  lager.info("init", Opts)
  State = {}
  (ok, State)
end


fn handle_call @public
case stop, From, State:
  lager.info("stopping by ~p, state was ~p.", [From, State])
  (stop, normal, stopped, State)

case (action, Data), _From, State:
  NewState = State
  R = ok
  (reply, R, NewState)

end


fn handle_cast @public
case Msg, State:
  lager.warning("Unknown cast ~p, ~p.", [Msg, State])
  (noreply, State)
end


fn handle_info @public
case Info, State:
  lager.info("info ~p, ~p.", [Info, State])
  (noreply, State)
end


fn terminate @public
case Reason, State:
  lager.info("terminate ~p, ~p", [Reason, State])
  ok
end


fn code_change @public
case OldVsn, State, Extra:
  lager.info("code_change ~p, ~p, ~p", [OldVsn, State, Extra])
  (ok, State)
end

#_ "private functions"
